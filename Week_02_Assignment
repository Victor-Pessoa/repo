import nbformat as nbf

# Create a new notebook
nb = nbf.v4.new_notebook()

# Introduction
nb.cells.append(nbf.v4.new_markdown_cell("""
# Understanding the `zip()` Function in Python

The `zip()` function is a built-in Python function that allows us to combine two or more iterables (like lists or tuples) into a single iterable. This is especially useful when you have data that is related but separated across different lists.

## Agenda
1. Introduction to the `zip()` function.
2. Basic usage of `zip()`.
3. Unzipping with `zip()`.
4. Practical applications of `zip()`.
5. Conclusions.
"""))

# Basic usage of zip()
nb.cells.append(nbf.v4.new_markdown_cell("""
## 2. Basic Usage of `zip()`

The basic usage of the `zip()` function involves passing two or more iterables to it. The function then returns an iterator that generates tuples containing elements from the input iterables, taken in order.

Let's see a basic example with two lists:
"""))

nb.cells.append(nbf.v4.new_code_cell("""
# Two lists
names = ["Alice", "Bob", "Charlie"]
scores = [85, 92, 88]

# Zipping the lists
zipped = list(zip(names, scores))
zipped
"""))

# Unzipping with zip()
nb.cells.append(nbf.v4.new_markdown_cell("""
## 3. Unzipping with `zip()`

Just as we can zip iterables together, we can also unzip them to get back the original iterables. This is done by using the `*` operator with `zip()`. 

Let's unzip the previously zipped data:
"""))

nb.cells.append(nbf.v4.new_code_cell("""
# Unzipping the data
unzipped_names, unzipped_scores = zip(*zipped)

unzipped_names, unzipped_scores
"""))

# Practical applications of zip()
nb.cells.append(nbf.v4.new_markdown_cell("""
## 4. Practical Applications of `zip()`

`zip()` can be especially useful in scenarios where we need to pair related data from separate lists, or when we want to iterate over multiple lists simultaneously. 

### Example: Calculating the Dot Product of Two Vectors

Let's consider two vectors, `A` and `B`, represented as lists. The dot product of these vectors is calculated as:

\[ A \cdot B = \sum_{i=1}^{n} A_i \times B_i \]

Where \( A_i \) and \( B_i \) are the components of vectors `A` and `B` respectively.

Using `zip()`, we can easily calculate the dot product as follows:
"""))

nb.cells.append(nbf.v4.new_code_cell("""
# Vectors
A = [1, 2, 3]
B = [4, 5, 6]

# Calculating dot product using zip
dot_product = sum(a*b for a, b in zip(A, B))
dot_product
"""))

# Conclusions
nb.cells.append(nbf.v4.new_markdown_cell("""
## 5. Conclusions

The `zip()` function is a versatile tool in Python that makes working with multiple iterables much simpler. Whether you're pairing related data, iterating over multiple lists simultaneously, or performing more complex operations like calculating the dot product of vectors, `zip()` offers an elegant and efficient solution.
"""))

# Save the notebook to a file
file_path = "/mnt/data/zip_function_explained.ipynb"
nbf.write(nb, file_path)

file_path
